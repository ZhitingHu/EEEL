#include "hierarchy.hpp"
#include <vector>
#include <queue>
#include <cstdint>
#include <utility>

namespace entity {

Path* Hierarchy::FindPathBetweenEntities(int entity_from, int entity_to) {
  Path* path = new Path();
  vector<int> sorted_common_ancestors; //TODO: should be vector<Node*>
  map<int, int> entity_from_ancestor_weights_from; 
  map<int, int> entity_to_ancestor_weights_to;
  FindCommonAncestors(entity_from, entity_to, entity_from_ancestor_weight_from, 
      entity_to_ancestor_weight_to, sorted_common_ancestors); 
#ifdef DEBUG
  CHECK_GT(sorted_common_ancestors.size(), 0);
#endif
  map<int, int> entity_from_ancestor_weights_to; 
  map<int, int> entity_to_ancestor_weights_from;
  // Update the weights of each node top-down,
  // to this end, scan unprocessed_nodes and sorted_common_ancestors 
  // alternately
  int num_common_ancestor = sorted_common_ancestors.size();
  // nodes in unprocessed_nodes are ancestors of entity_from or/and entity_to
  queue<int> unprocessed_nodes; 
  unprocessed_nodes.push(sorted_common_ancestors[0]);
  set<int> processed_nodes;
  int cur_idx; // idx of head node in unprocessed_nodes
  Node* cur_node; // nodes_[cur_idx]
  int cur_ca_idx_i = 1; // index of sorted_common_ancestors
  int cur_ca_idx; // idx of ancestor: sorted_common_ancestors[cur_ca_idx_i]
  int c_idx; // idx of child
  while (!unprocessed_nodes.empty()) {
    cur_idx = unprocessed_nodes.pop();
    cur_node = nodes_[cur_idx];
    while (cur_ca_idx_i < num_common_ancestor) {
      /// process common ancestors
      cur_ca_idx = sorted_common_ancestors[cur_ca_idx_i];
      if (nodes_[cur_ca_idx]->level() > cur_node->level()) {
        break;
      }
      if (processed_nodes.find(cur_ca_idx) != processed_nodes.end()) {
        ++cur_ca_idx_i;
        continue;
      }
      // add the weights to its children
      const vector<int>& cur_ca_children = nodes_[cur_ca_idx]->child_idx();
      for (int c_idx_i = 0; c_idx_i < cur_ca_children.size(); ++c_idx_i) {
        c_idx = cur_ca_children[c_idx_i];
        //TODO
        //if (entity_from_ancestor_weights_from.find(c_idx) 
        //    != entity_from_ancestor_weights_from.end()) {
        //  entity_from_ancestor_weights_to[c_idx] 
        //      += entity_to_ancestor_weights_to[cur_ca_idx];
        //  unprocessed_nodes.push(c_idx);
        //}
        //if (entity_to_ancestor_weights_to.find(c_idx) 
        //    != entity_to_ancestor_weights_to.end()) {
        //  entity_to_ancestor_weights_from[c_idx] 
        //      += entity_from_ancestor_weights_from[cur_ca_idx];
        //  unprocessed_nodes.push(c_idx);
        //}
      }
      // next ca
      processed_nodes.insert(cur_ca_idx);
      ++cur_ca_idx_i;
    }
    
    /// process nodes in unprocessed_nodes     
    const vector<int>& cur_children = cur_node->child_idx();
    // add the weights to its children
    for (int c_idx_i = 0; c_idx_i < cur_children.size(); ++c_idx_i) {
      c_idx = cur_children[c_idx_i];
      if (processed_nodes.find(c_idx) != processed_nodes.end()) {
        continue;
      }
      
    }
  }

}

/**
 * @param [IN] entity_from
 * @param [IN] entity_to
 * @param [OUT] entity_from_ancestor_weights: 
 *     category_id => #path to entity_from
 * @param [OUT] entity_to_ancestor_weights:
 *     category_id => #path to entity_to
 * @param [OUT] common_ancestors:
 *     common ancestors of that have disjoint paths to entity_from 
 *     and entity_to; sorted by node levels 
 *
 * Note: the designed alg. is provably right. Consider as a contribution
 *       in the paper?
 */
void Hierarchy::FindCommonAncestors(const int entity_from, const int entity_to,
    map<int, int>& entity_from_ancestor_weights, 
    map<int, int>& entity_to_ancestor_weights,
    vector<Node*>& common_ancestors) {
  /// get the ancestor nodes of entity_from 
  queue<int> unprocessed_nodes;
  unprocessed_nodes.push(entity_from);
  int cur_node_idx;
  Node* cur_node;
  while (!unprocessed_nodes.empty()) {
    cur_node_idx = unprocessed_nodes.pop();
    ++entity_from_ancestor_weights[cur_node_idx];
    const vector<int>& cur_parents = nodes_[cur_node_idx]->parent_idx();
    for (int p_idx_i = 0; p_idx_i < cur_parents.size(); ++p_idx_i) {
      unprocessed_nodes.push(cur_parents[i]);
    }
  } // entity_from is included in entity_from_ancestor_weights

  /// get the ancestor nodes of entity_to and highest common ancestors 
  set<int> common_ancestor_set;
  int cur_parent_idx;
  // nodes in unprocessed_nodes are either non-common ancestors, or
  // common ancestors that have a disjoint path to entity_from/to
  unprocessed_nodes.push(entity_to);
  while (!unprocessed_nodes.empty()) {
    cur_node_idx = unprocessed_nodes.pop();
    ++entity_to_ancestor_weights[cur_node_idx];
    const vector<int>& cur_parents = nodes_[cur_node_idx]->parent_idx();
    for (int p_idx_i = 0; p_idx_i < cur_parents.size(); ++p_idx_i) {
      cur_parent_idx = cur_parents[p_idx_i];
      // common ancestor: the node is an ancestor of entity_from AND
      // has a child (!= cur_node) that is also an ancestor of entity_from (or 
      // entity_from itself)
      if (entity_from_ancestor_weights.find(cur_parent_idx) 
          != entity_from_ancestor_weights.end() &&
          common_ancestor_set.find(cur_parent_idx) // make sure no duplicate
          == common_ancestor_set.end()) {
        const vector<int>* cur_parent_children 
            = &nodes_[cur_parent_idx]->child_idx();
        int c_idx_i = 0;
        for (; c_idx_i < cur_parant_children->size(); ++c_idx_i) {
          int c_idx = cur_parent_children->at(idx);
          if (c_idx != cur_node_idx && entity_from_ancestor_weights.find(c_idx) 
              != entity_from_ancestor_weights.end()) {
            break;
          }
        }
        if (c_idx_i < cur_parent_children->size()) {
          common_ancestors.push_back(nodes_[cur_parent_idx]);
          common_ancestor_set.insert(cur_parent_idx);
          unprocessed_nodes.push(cur_parent_idx);
        } // else, do not traverse cur_parent's parents
      } else {
        unprocessed_nodes.push(cur_parent_idx);
      }
 
    } // end of traverse all parent nodes
  }
  /// sort common_ancestors acc. to node level 
  sort(common_ancestors.begin(), common_ancestors.end());  

  /// de-allocate memory
  std::queue<int>().swap(unprocessed_nodes); 
  std::set<int>().swap(common_ancestor_set);
}

}  // namespace entity
